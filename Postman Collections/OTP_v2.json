{
	"info": {
		"_postman_id": "36dd9697-08cb-4c67-b8d7-aaea91dd11a7",
		"name": "Pristine Smoke Test - Dev",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Subway A48N A or C; ADS1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is A48N\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_A48N\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is Manhattan\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.eql(\"Manhattan\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName is A or C\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"A\",\"C\"]);",
							"    });",
							"    ",
							"    pm.test(\"Trip \" +i+ \" routeId\", function () {",
							"        pm.expect(arrDeptArray[i].routeId).to.be.oneOf([\"MTASBWY_A\",\"MTASBWY_C\"]);",
							"        }); ",
							"    ",
							"    pm.test(\"Trip \" +i+ \" routeLongName\", function () {",
							"        pm.expect(arrDeptArray[i].routeLongName).to.be.oneOf([\"8 Avenue Express\",\"8 Avenue Local\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"var realtimeTrips=0;",
							"var canceledTrips=0;",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"   ",
							"   if(arrDeptArray[i].predicted == true) {",
							"        realtimeTrips = realtimeTrips+1;",
							"    }",
							"    if(arrDeptArray[i].status==='CANCELED'){",
							"        canceledTrips = canceledTrips+1;",
							"    }",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"        //console.log(\"No realtime. Trip\"+i+\" is using scheduled data\"+\" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"Total trips: \" +arrDeptArray.length+ \" Realtime: \" +realtimeTrips+ \" Canceled: \" +canceledTrips);",
							"",
							"pm.test(\"Most trips are realtime\", function() {",
							"    pm.expect(realtimeTrips).to.be.greaterThan(arrDeptArray.length/2);",
							"});",
							"",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "f19de9e2-2a22-4f76-b81e-fba1fc35a496",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_A48N.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_A48N.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway 720N; ADS2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is 720N\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_720N\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is Manhattan\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.eql(\"Flushing\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName is A or C\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"7\",\"7X\"]);",
							"    });",
							"    ",
							"    pm.test(\"Trip \" +i+ \" routeId\", function () {",
							"        pm.expect(arrDeptArray[i].routeId).to.be.oneOf([\"MTASBWY_7\",\"MTASBWY_7X\"]);",
							"        }); ",
							"    ",
							"    pm.test(\"Trip \" +i+ \" routeLongName\", function () {",
							"        pm.expect(arrDeptArray[i].routeLongName).to.be.oneOf([\"Flushing Local\",\"Flushing Express\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"var realtimeTrips=0;",
							"var canceledTrips=0;",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"   ",
							"   if(arrDeptArray[i].predicted == true) {",
							"        realtimeTrips = realtimeTrips+1;",
							"    }",
							"    if(arrDeptArray[i].status==='CANCELED'){",
							"        canceledTrips = canceledTrips+1;",
							"    }",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"        //console.log(\"No realtime. Trip\"+i+\" is using scheduled data\"+\" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"Total trips: \" +arrDeptArray.length+ \" Realtime: \" +realtimeTrips+ \" Canceled: \" +canceledTrips);",
							"",
							"pm.test(\"Most trips are realtime\", function() {",
							"    pm.expect(realtimeTrips).to.be.greaterThan(arrDeptArray.length/2);",
							"});",
							"",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "ee514cd4-b97d-482f-b7a4-5cb17978a607",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_720N.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_720N.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway A48S A or C",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bca89418-4bb8-4fdf-b945-473758ac7cd6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is A48S\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_A48S\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is Lefferts\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.eql(\"Lefferts Blvd & The Rockaways\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" routeShortName is A or C\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"A\",\"C\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "06a96d9f-acae-4da3-8036-b51af419d9a4",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_A48S.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_A48S.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway A42N A, C or G",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is A42N\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_A42N\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign\", function () {",
							"         pm.expect(arrDeptArray[i].tripHeadsign).to.be.oneOf([\"Manhattan\",\"Manhattan & Church Av\",\"Court Sq\"]);",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName is A, C, G\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"A\",\"C\", \"G\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "c2ed9708-c5ba-44c1-a6c8-c9e5467c2212",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_A42N.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_A42N.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway 117N 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is 117N\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_117N\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName is 1\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"1\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "af24be97-9c2e-4570-91ab-37ba70fa9bad",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_117N.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_117N.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway 108S 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is 108S\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_108S\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName is 1\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"1\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "2694bc54-8fb2-42d4-9969-198af876f3a7",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_108S.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_108S.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway 104S 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is 108S\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_104S\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName is 1\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"1\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "0da179f9-3625-4376-a3b5-ad41a054fdf0",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_104S.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_104S.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway 208S 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is 208S\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_208S\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is Manhattan\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.eql(\"Manhattan\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName is 2\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"2\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "84385d3d-7b4e-4dd5-979e-c7da1d317ed7",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_208S.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_208S.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway 238S 2 or 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is 238S\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_238S\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is Flatbush etc\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.eql(\"Flatbush Av & New Lots Av\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName is 2 or 3\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"2\", \"3\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "22c3328b-d29f-4447-a92d-a1fd9baa3673",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_238S.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_238S.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway H13S S",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is H13S\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_H13S\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is Rockaway Park\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.eql(\"Rockaway Park\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName is S\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"S\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "22eeef76-c1da-4638-b8a7-3afd2760931d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_H13S.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_H13S.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway D26N S, B or Q",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is D26N\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_D26N\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is Manhattan\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.include(\"Manhattan\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName is S, B or Q\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"S\", \"B\", \"Q\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "f2eb6c3f-6a23-43fc-9335-053b965c8314",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_D26N.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_D26N.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway 707N 7",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is 707N\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_707N\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is Flushing\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.eql(\"Flushing\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"7\",\"7X\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "6a5d3785-f8f5-4507-9cd0-aa7abd5e9ad3",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_707N.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_707N.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway 714S 7",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is 714S\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_714S\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is Manhattan\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.eql(\"Manhattan\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName is 7\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"7\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "bc49c58b-bd0c-4b0a-a223-5787f14996fe",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_714S.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_714S.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway S17N SIR",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is S17N\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_S17N\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is St George\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.eql(\"St George\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName is SIR\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"SIR\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "5fe7ddc9-6fd3-4aff-9464-eea7933fb9c0",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_S17N.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_S17N.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway 411N 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is 411N\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_411N\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is Woodlawn\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.include(\"Woodlawn\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName is 4\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"4\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "15b1d951-3cb8-48d0-8c3c-5b69cd4e2950",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_411N.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_411N.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway 505S 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is 505S\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_505S\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is \", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.include(\"Manhattan\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName is 5\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"5\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "a2fa5673-248f-4f94-a165-c5a0f0bd8161",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_505S.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_505S.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway G16N M or R",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is G16N\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_G16N\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is Forest Hills\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.include(\"Forest Hills\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName is M or R\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"M\", \"R\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "0e679ce9-2059-48e4-a801-57c279a11d26",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_G16N.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_G16N.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Bus 306619",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9314f214-02b5-49ae-9c0c-cf16b231733f",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is MTA_306619\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTA_306619\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is Brooklyn Bridge\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.include(\"B63 - BROOKLYN BRIDGE\");",
							"        });",
							"}",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "ff6bd180-49d8-4831-8bc8-c87495626807",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTA_306619.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTA_306619.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Bus 100209",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9314f214-02b5-49ae-9c0c-cf16b231733f",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is MTA_100209\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTA_100209\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is Westchester\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.include(\"WESTCHESTER\");",
							"        });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "b1fff009-7d85-461c-b41e-6528d63dce94",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTA_100209.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTA_100209.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Bus 301045",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9314f214-02b5-49ae-9c0c-cf16b231733f",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is MTA_301045\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTA_301045\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is BED_STUY\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.include(\"BED-STUY\");",
							"        });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "a78a828d-0390-4504-858d-7ab0e52d5c46",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTA_301045.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTA_301045.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": [
				{
					"id": "c897b3cb-c75e-4356-a628-846607d04fb5",
					"name": "Bus 903093",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTA_903093.json?key=OBA",
							"protocol": "https",
							"host": [
								"hub-mta-{{env}}",
								"camsys-apps",
								"com"
							],
							"path": [
								"transit-services",
								"v2",
								"arrivals-and-departures-for-stop",
								"MTA_903093.json"
							],
							"query": [
								{
									"key": "key",
									"value": "OBA"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 07 Mar 2024 15:11:47 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json;charset=ISO-8859-1"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "ETag",
							"value": "994751192"
						},
						{
							"key": "vary",
							"value": "accept-encoding"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Language",
							"value": "en"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "{\n    \"code\": 200,\n    \"currentTime\": 1709824307779,\n    \"data\": {\n        \"entry\": {\n            \"arrivalsAndDepartures\": [\n                {\n                    \"actualTrack\": \"\",\n                    \"arrivalEnabled\": false,\n                    \"blockTripSequence\": 0,\n                    \"departureEnabled\": true,\n                    \"distanceFromStop\": -208.0873627523487,\n                    \"frequency\": null,\n                    \"historicalOccupancy\": \"\",\n                    \"lastUpdateTime\": 0,\n                    \"numberOfStopsAway\": -1,\n                    \"occupancyStatus\": \"\",\n                    \"predicted\": false,\n                    \"predictedArrivalInterval\": null,\n                    \"predictedArrivalTime\": 0,\n                    \"predictedDepartureInterval\": null,\n                    \"predictedDepartureTime\": 0,\n                    \"predictedOccupancy\": \"\",\n                    \"routeId\": \"MTA NYCT_M15+\",\n                    \"routeLongName\": \"East Harlem - South Ferry\",\n                    \"routeShortName\": \"M15-SBS\",\n                    \"scheduledArrivalInterval\": null,\n                    \"scheduledArrivalTime\": 1709824260000,\n                    \"scheduledDepartureInterval\": null,\n                    \"scheduledDepartureTime\": 1709824260000,\n                    \"scheduledTrack\": \"\",\n                    \"serviceDate\": 1709787600000,\n                    \"situationIds\": [],\n                    \"status\": \"default\",\n                    \"stopId\": \"MTA_903093\",\n                    \"stopSequence\": 0,\n                    \"totalStopsInTrip\": 16,\n                    \"tripHeadsign\": \"SELECT BUS SERVICE 125 ST via 1 AV\",\n                    \"tripId\": \"MTA NYCT_OF_A4-Weekday-061100_SBS15_446\",\n                    \"tripStatus\": {\n                        \"activeTripId\": \"MTA NYCT_OF_A4-Weekday-061100_SBS15_446\",\n                        \"blockTripSequence\": 0,\n                        \"closestStop\": \"MTA_903093\",\n                        \"closestStopTimeOffset\": -47,\n                        \"distanceAlongTrip\": 0,\n                        \"frequency\": null,\n                        \"lastKnownDistanceAlongTrip\": 0,\n                        \"lastKnownOrientation\": 0,\n                        \"lastLocationUpdateTime\": 0,\n                        \"lastUpdateTime\": 0,\n                        \"nextStop\": \"MTA_401687\",\n                        \"nextStopTimeOffset\": 193,\n                        \"occupancyCapacity\": 0,\n                        \"occupancyCount\": 0,\n                        \"occupancyStatus\": \"\",\n                        \"orientation\": 54.64584425614835,\n                        \"phase\": \"\",\n                        \"position\": {\n                            \"lat\": 40.72541460392768,\n                            \"lon\": -73.98688974721347\n                        },\n                        \"predicted\": false,\n                        \"scheduleDeviation\": 0,\n                        \"scheduledDistanceAlongTrip\": 208.0873627523487,\n                        \"serviceDate\": 1709787600000,\n                        \"situationIds\": [],\n                        \"status\": \"default\",\n                        \"totalDistanceAlongTrip\": 10207.432434314564,\n                        \"vehicleId\": \"\"\n                    },\n                    \"vehicleId\": \"\"\n                },\n                {\n                    \"actualTrack\": \"\",\n                    \"arrivalEnabled\": true,\n                    \"blockTripSequence\": 0,\n                    \"departureEnabled\": true,\n                    \"distanceFromStop\": 1107.22231430701,\n                    \"frequency\": null,\n                    \"historicalOccupancy\": \"\",\n                    \"lastUpdateTime\": 1709824263000,\n                    \"numberOfStopsAway\": 1,\n                    \"occupancyStatus\": \"\",\n                    \"predicted\": true,\n                    \"predictedArrivalInterval\": null,\n                    \"predictedArrivalTime\": 1709824624000,\n                    \"predictedDepartureInterval\": null,\n                    \"predictedDepartureTime\": 1709824624000,\n                    \"predictedOccupancy\": \"\",\n                    \"routeId\": \"MTA NYCT_M15+\",\n                    \"routeLongName\": \"East Harlem - South Ferry\",\n                    \"routeShortName\": \"M15-SBS\",\n                    \"scheduledArrivalInterval\": null,\n                    \"scheduledArrivalTime\": 1709824620000,\n                    \"scheduledDepartureInterval\": null,\n                    \"scheduledDepartureTime\": 1709824620000,\n                    \"scheduledTrack\": \"\",\n                    \"serviceDate\": 1709787600000,\n                    \"situationIds\": [],\n                    \"status\": \"default\",\n                    \"stopId\": \"MTA_903093\",\n                    \"stopSequence\": 5,\n                    \"totalStopsInTrip\": 21,\n                    \"tripHeadsign\": \"SELECT BUS SERVICE 125 ST via 1 AV\",\n                    \"tripId\": \"MTA NYCT_OF_A4-Weekday-059600_SBS15_415\",\n                    \"tripStatus\": {\n                        \"activeTripId\": \"MTA NYCT_OF_A4-Weekday-059600_SBS15_415\",\n                        \"blockTripSequence\": 0,\n                        \"closestStop\": \"MTA_405320\",\n                        \"closestStopTimeOffset\": 99,\n                        \"distanceAlongTrip\": 2572.552411821078,\n                        \"frequency\": null,\n                        \"lastKnownDistanceAlongTrip\": 0,\n                        \"lastKnownOrientation\": 0,\n                        \"lastLocationUpdateTime\": 0,\n                        \"lastUpdateTime\": 1709824263000,\n                        \"nextStop\": \"MTA_405320\",\n                        \"nextStopTimeOffset\": 99,\n                        \"occupancyCapacity\": 0,\n                        \"occupancyCount\": 0,\n                        \"occupancyStatus\": \"\",\n                        \"orientation\": 62.62490822737934,\n                        \"phase\": \"in_progress\",\n                        \"position\": {\n                            \"lat\": 40.71478277788039,\n                            \"lon\": -73.9925247072464\n                        },\n                        \"predicted\": true,\n                        \"scheduleDeviation\": 19,\n                        \"scheduledDistanceAlongTrip\": 2572.552411821078,\n                        \"serviceDate\": 1709787600000,\n                        \"situationIds\": [],\n                        \"status\": \"SCHEDULED\",\n                        \"totalDistanceAlongTrip\": 13852.933429518514,\n                        \"vehicleId\": \"MTA NYCT_6161\"\n                    },\n                    \"vehicleId\": \"MTA NYCT_6161\"\n                },\n                {\n                    \"actualTrack\": \"\",\n                    \"arrivalEnabled\": true,\n                    \"blockTripSequence\": 0,\n                    \"departureEnabled\": true,\n                    \"distanceFromStop\": 2560.753246822297,\n                    \"frequency\": null,\n                    \"historicalOccupancy\": \"\",\n                    \"lastUpdateTime\": 1709824256000,\n                    \"numberOfStopsAway\": 2,\n                    \"occupancyStatus\": \"\",\n                    \"predicted\": true,\n                    \"predictedArrivalInterval\": null,\n                    \"predictedArrivalTime\": 1709825096000,\n                    \"predictedDepartureInterval\": null,\n                    \"predictedDepartureTime\": 1709825096000,\n                    \"predictedOccupancy\": \"\",\n                    \"routeId\": \"MTA NYCT_M15+\",\n                    \"routeLongName\": \"East Harlem - South Ferry\",\n                    \"routeShortName\": \"M15-SBS\",\n                    \"scheduledArrivalInterval\": null,\n                    \"scheduledArrivalTime\": 1709825040000,\n                    \"scheduledDepartureInterval\": null,\n                    \"scheduledDepartureTime\": 1709825040000,\n                    \"scheduledTrack\": \"\",\n                    \"serviceDate\": 1709787600000,\n                    \"situationIds\": [],\n                    \"status\": \"default\",\n                    \"stopId\": \"MTA_903093\",\n                    \"stopSequence\": 5,\n                    \"totalStopsInTrip\": 21,\n                    \"tripHeadsign\": \"SELECT BUS SERVICE 125 ST via 1 AV\",\n                    \"tripId\": \"MTA NYCT_OF_A4-Weekday-060400_SBS15_416\",\n                    \"tripStatus\": {\n                        \"activeTripId\": \"MTA NYCT_OF_A4-Weekday-060400_SBS15_416\",\n                        \"blockTripSequence\": 0,\n                        \"closestStop\": \"MTA_404850\",\n                        \"closestStopTimeOffset\": -9,\n                        \"distanceAlongTrip\": 1119.0214793057905,\n                        \"frequency\": null,\n                        \"lastKnownDistanceAlongTrip\": 0,\n                        \"lastKnownOrientation\": 0,\n                        \"lastLocationUpdateTime\": 0,\n                        \"lastUpdateTime\": 1709824256000,\n                        \"nextStop\": \"MTA_405319\",\n                        \"nextStopTimeOffset\": 255,\n                        \"occupancyCapacity\": 0,\n                        \"occupancyCount\": 0,\n                        \"occupancyStatus\": \"\",\n                        \"orientation\": 47.11068276874929,\n                        \"phase\": \"in_progress\",\n                        \"position\": {\n                            \"lat\": 40.707784142537406,\n                            \"lon\": -74.00372393394629\n                        },\n                        \"predicted\": true,\n                        \"scheduleDeviation\": 51,\n                        \"scheduledDistanceAlongTrip\": 1119.0214793057905,\n                        \"serviceDate\": 1709787600000,\n                        \"situationIds\": [],\n                        \"status\": \"SCHEDULED\",\n                        \"totalDistanceAlongTrip\": 13852.933429518514,\n                        \"vehicleId\": \"MTA NYCT_6095\"\n                    },\n                    \"vehicleId\": \"MTA NYCT_6095\"\n                },\n                {\n                    \"actualTrack\": \"\",\n                    \"arrivalEnabled\": true,\n                    \"blockTripSequence\": 0,\n                    \"departureEnabled\": true,\n                    \"distanceFromStop\": 3658.321719823709,\n                    \"frequency\": null,\n                    \"historicalOccupancy\": \"\",\n                    \"lastUpdateTime\": 1709824266000,\n                    \"numberOfStopsAway\": 4,\n                    \"occupancyStatus\": \"\",\n                    \"predicted\": true,\n                    \"predictedArrivalInterval\": null,\n                    \"predictedArrivalTime\": 1709825436000,\n                    \"predictedDepartureInterval\": null,\n                    \"predictedDepartureTime\": 1709825436000,\n                    \"predictedOccupancy\": \"\",\n                    \"routeId\": \"MTA NYCT_M15+\",\n                    \"routeLongName\": \"East Harlem - South Ferry\",\n                    \"routeShortName\": \"M15-SBS\",\n                    \"scheduledArrivalInterval\": null,\n                    \"scheduledArrivalTime\": 1709825460000,\n                    \"scheduledDepartureInterval\": null,\n                    \"scheduledDepartureTime\": 1709825460000,\n                    \"scheduledTrack\": \"\",\n                    \"serviceDate\": 1709787600000,\n                    \"situationIds\": [],\n                    \"status\": \"default\",\n                    \"stopId\": \"MTA_903093\",\n                    \"stopSequence\": 5,\n                    \"totalStopsInTrip\": 21,\n                    \"tripHeadsign\": \"SELECT BUS SERVICE 125 ST via 1 AV\",\n                    \"tripId\": \"MTA NYCT_OF_A4-Weekday-061100_SBS15_417\",\n                    \"tripStatus\": {\n                        \"activeTripId\": \"MTA NYCT_OF_A4-Weekday-061100_SBS15_417\",\n                        \"blockTripSequence\": 0,\n                        \"closestStop\": \"MTA_803121\",\n                        \"closestStopTimeOffset\": -7,\n                        \"distanceAlongTrip\": 21.453006304378995,\n                        \"frequency\": null,\n                        \"lastKnownDistanceAlongTrip\": 0,\n                        \"lastKnownOrientation\": 0,\n                        \"lastLocationUpdateTime\": 0,\n                        \"lastUpdateTime\": 1709824266000,\n                        \"nextStop\": \"MTA_401666\",\n                        \"nextStopTimeOffset\": 228,\n                        \"occupancyCapacity\": 0,\n                        \"occupancyCount\": 0,\n                        \"occupancyStatus\": \"\",\n                        \"orientation\": 140.02907358132006,\n                        \"phase\": \"in_progress\",\n                        \"position\": {\n                            \"lat\": 40.70214355381438,\n                            \"lon\": -74.01375401156804\n                        },\n                        \"predicted\": true,\n                        \"scheduleDeviation\": -1,\n                        \"scheduledDistanceAlongTrip\": 21.453006304378995,\n                        \"serviceDate\": 1709787600000,\n                        \"situationIds\": [],\n                        \"status\": \"SCHEDULED\",\n                        \"totalDistanceAlongTrip\": 13852.933429518514,\n                        \"vehicleId\": \"MTA NYCT_6221\"\n                    },\n                    \"vehicleId\": \"MTA NYCT_6221\"\n                },\n                {\n                    \"actualTrack\": \"\",\n                    \"arrivalEnabled\": true,\n                    \"blockTripSequence\": 0,\n                    \"departureEnabled\": true,\n                    \"distanceFromStop\": 3679.774726128088,\n                    \"frequency\": null,\n                    \"historicalOccupancy\": \"\",\n                    \"lastUpdateTime\": 1709824276000,\n                    \"numberOfStopsAway\": 5,\n                    \"occupancyStatus\": \"\",\n                    \"predicted\": true,\n                    \"predictedArrivalInterval\": null,\n                    \"predictedArrivalTime\": 1709825856000,\n                    \"predictedDepartureInterval\": null,\n                    \"predictedDepartureTime\": 1709825856000,\n                    \"predictedOccupancy\": \"\",\n                    \"routeId\": \"MTA NYCT_M15+\",\n                    \"routeLongName\": \"East Harlem - South Ferry\",\n                    \"routeShortName\": \"M15-SBS\",\n                    \"scheduledArrivalInterval\": null,\n                    \"scheduledArrivalTime\": 1709825880000,\n                    \"scheduledDepartureInterval\": null,\n                    \"scheduledDepartureTime\": 1709825880000,\n                    \"scheduledTrack\": \"\",\n                    \"serviceDate\": 1709787600000,\n                    \"situationIds\": [],\n                    \"status\": \"default\",\n                    \"stopId\": \"MTA_903093\",\n                    \"stopSequence\": 5,\n                    \"totalStopsInTrip\": 21,\n                    \"tripHeadsign\": \"SELECT BUS SERVICE 125 ST via 1 AV\",\n                    \"tripId\": \"MTA NYCT_OF_A4-Weekday-061800_SBS15_411\",\n                    \"tripStatus\": {\n                        \"activeTripId\": \"MTA NYCT_OF_A4-Weekday-061800_SBS15_411\",\n                        \"blockTripSequence\": 0,\n                        \"closestStop\": \"MTA_803121\",\n                        \"closestStopTimeOffset\": 4,\n                        \"distanceAlongTrip\": 0,\n                        \"frequency\": null,\n                        \"lastKnownDistanceAlongTrip\": 0,\n                        \"lastKnownOrientation\": 0,\n                        \"lastLocationUpdateTime\": 0,\n                        \"lastUpdateTime\": 1709824276000,\n                        \"nextStop\": \"MTA_803121\",\n                        \"nextStopTimeOffset\": 4,\n                        \"occupancyCapacity\": 0,\n                        \"occupancyCount\": 0,\n                        \"occupancyStatus\": \"\",\n                        \"orientation\": 221.3477772123517,\n                        \"phase\": \"in_progress\",\n                        \"position\": {\n                            \"lat\": 40.702044,\n                            \"lon\": -74.013584\n                        },\n                        \"predicted\": true,\n                        \"scheduleDeviation\": -400,\n                        \"scheduledDistanceAlongTrip\": 0,\n                        \"serviceDate\": 1709787600000,\n                        \"situationIds\": [],\n                        \"status\": \"SCHEDULED\",\n                        \"totalDistanceAlongTrip\": 13852.933429518514,\n                        \"vehicleId\": \"MTA NYCT_6099\"\n                    },\n                    \"vehicleId\": \"MTA NYCT_6099\"\n                },\n                {\n                    \"actualTrack\": \"\",\n                    \"arrivalEnabled\": true,\n                    \"blockTripSequence\": 0,\n                    \"departureEnabled\": true,\n                    \"distanceFromStop\": 3679.774726128088,\n                    \"frequency\": null,\n                    \"historicalOccupancy\": \"\",\n                    \"lastUpdateTime\": 0,\n                    \"numberOfStopsAway\": 5,\n                    \"occupancyStatus\": \"\",\n                    \"predicted\": false,\n                    \"predictedArrivalInterval\": null,\n                    \"predictedArrivalTime\": 0,\n                    \"predictedDepartureInterval\": null,\n                    \"predictedDepartureTime\": 0,\n                    \"predictedOccupancy\": \"\",\n                    \"routeId\": \"MTA NYCT_M15+\",\n                    \"routeLongName\": \"East Harlem - South Ferry\",\n                    \"routeShortName\": \"M15-SBS\",\n                    \"scheduledArrivalInterval\": null,\n                    \"scheduledArrivalTime\": 1709826300000,\n                    \"scheduledDepartureInterval\": null,\n                    \"scheduledDepartureTime\": 1709826300000,\n                    \"scheduledTrack\": \"\",\n                    \"serviceDate\": 1709787600000,\n                    \"situationIds\": [],\n                    \"status\": \"default\",\n                    \"stopId\": \"MTA_903093\",\n                    \"stopSequence\": 5,\n                    \"totalStopsInTrip\": 21,\n                    \"tripHeadsign\": \"SELECT BUS SERVICE 125 ST via 1 AV\",\n                    \"tripId\": \"MTA NYCT_OF_A4-Weekday-062500_SBS15_419\",\n                    \"tripStatus\": {\n                        \"activeTripId\": \"MTA NYCT_OF_A4-Weekday-062500_SBS15_419\",\n                        \"blockTripSequence\": 0,\n                        \"closestStop\": \"MTA_803121\",\n                        \"closestStopTimeOffset\": 793,\n                        \"distanceAlongTrip\": 0,\n                        \"frequency\": null,\n                        \"lastKnownDistanceAlongTrip\": 0,\n                        \"lastKnownOrientation\": 0,\n                        \"lastLocationUpdateTime\": 0,\n                        \"lastUpdateTime\": 0,\n                        \"nextStop\": \"MTA_803121\",\n                        \"nextStopTimeOffset\": 793,\n                        \"occupancyCapacity\": 0,\n                        \"occupancyCount\": 0,\n                        \"occupancyStatus\": \"\",\n                        \"orientation\": 221.3477772123517,\n                        \"phase\": \"\",\n                        \"position\": {\n                            \"lat\": 40.702044,\n                            \"lon\": -74.013584\n                        },\n                        \"predicted\": false,\n                        \"scheduleDeviation\": 0,\n                        \"scheduledDistanceAlongTrip\": 0,\n                        \"serviceDate\": 1709787600000,\n                        \"situationIds\": [],\n                        \"status\": \"default\",\n                        \"totalDistanceAlongTrip\": 13852.933429518514,\n                        \"vehicleId\": \"\"\n                    },\n                    \"vehicleId\": \"\"\n                }\n            ],\n            \"nearbyStopIds\": [\n                \"MTA_405311\",\n                \"MTASBWY_F14-entrance-1\",\n                \"MTA_401682\"\n            ],\n            \"situationIds\": [],\n            \"stopId\": \"MTA_903093\"\n        },\n        \"references\": {\n            \"agencies\": [\n                {\n                    \"disclaimer\": \"\",\n                    \"email\": \"\",\n                    \"fareUrl\": \"\",\n                    \"id\": \"MTA NYCT\",\n                    \"lang\": \"\",\n                    \"name\": \"MTA New York City Transit\",\n                    \"phone\": \"718-330-1234\",\n                    \"privateService\": false,\n                    \"timezone\": \"America/New_York\",\n                    \"url\": \"http://www.mta.info\"\n                }\n            ],\n            \"routes\": [\n                {\n                    \"agencyId\": \"MTA NYCT\",\n                    \"color\": \"006CB7\",\n                    \"description\": \"via 1st Av / 2nd Av\",\n                    \"id\": \"MTA NYCT_M15\",\n                    \"longName\": \"East Harlem - South Ferry\",\n                    \"nullSafeShortName\": \"M15\",\n                    \"shortName\": \"M15\",\n                    \"textColor\": \"FFFFFF\",\n                    \"type\": 3,\n                    \"url\": \"\"\n                },\n                {\n                    \"agencyId\": \"MTA NYCT\",\n                    \"color\": \"006CB7\",\n                    \"description\": \"Select Bus Service via 1st Av / 2nd Av\",\n                    \"id\": \"MTA NYCT_M15+\",\n                    \"longName\": \"East Harlem - South Ferry\",\n                    \"nullSafeShortName\": \"M15-SBS\",\n                    \"shortName\": \"M15-SBS\",\n                    \"textColor\": \"FFFFFF\",\n                    \"type\": 3,\n                    \"url\": \"\"\n                },\n                {\n                    \"agencyId\": \"MTA NYCT\",\n                    \"color\": \"FAA61A\",\n                    \"description\": \"via Houston St Crosstown\",\n                    \"id\": \"MTA NYCT_M21\",\n                    \"longName\": \"Lower East Side - West Village\",\n                    \"nullSafeShortName\": \"M21\",\n                    \"shortName\": \"M21\",\n                    \"textColor\": \"FFFFFF\",\n                    \"type\": 3,\n                    \"url\": \"\"\n                },\n                {\n                    \"agencyId\": \"MTA NYCT\",\n                    \"color\": \"00933C\",\n                    \"description\": \"via Clove Rd\",\n                    \"id\": \"MTA NYCT_SIM35\",\n                    \"longName\": \"Port Richmond - Lower Manhattan Express\",\n                    \"nullSafeShortName\": \"SIM35\",\n                    \"shortName\": \"SIM35\",\n                    \"textColor\": \"FFFFFF\",\n                    \"type\": 702,\n                    \"url\": \"\"\n                },\n                {\n                    \"agencyId\": \"MTA NYCT\",\n                    \"color\": \"00933C\",\n                    \"description\": \"via F Capodanno / Giffords La\",\n                    \"id\": \"MTA NYCT_SIM5\",\n                    \"longName\": \"Eltingville - Lower Manhattan Express\",\n                    \"nullSafeShortName\": \"SIM5\",\n                    \"shortName\": \"SIM5\",\n                    \"textColor\": \"FFFFFF\",\n                    \"type\": 702,\n                    \"url\": \"\"\n                }\n            ],\n            \"situations\": [],\n            \"stopTimes\": [],\n            \"stops\": [\n                {\n                    \"code\": \"903093\",\n                    \"direction\": \"\",\n                    \"id\": \"MTA_903093\",\n                    \"lat\": 40.72401,\n                    \"locationType\": 0,\n                    \"lon\": -73.987803,\n                    \"name\": \"1 AV/E 1 ST\",\n                    \"parent\": \"\",\n                    \"routeIds\": [\n                        \"MTA NYCT_M15+\"\n                    ],\n                    \"staticRouteIds\": [\n                        \"MTA NYCT_M15+\"\n                    ],\n                    \"wheelchairBoarding\": \"ACCESSIBLE\"\n                },\n                {\n                    \"code\": \"401687\",\n                    \"direction\": \"NE\",\n                    \"id\": \"MTA_401687\",\n                    \"lat\": 40.732122,\n                    \"locationType\": 0,\n                    \"lon\": -73.981942,\n                    \"name\": \"1 AV/E 14 ST\",\n                    \"parent\": \"\",\n                    \"routeIds\": [\n                        \"MTA NYCT_M15\",\n                        \"MTA NYCT_M15+\"\n                    ],\n                    \"staticRouteIds\": [\n                        \"MTA NYCT_M15\",\n                        \"MTA NYCT_M15+\"\n                    ],\n                    \"wheelchairBoarding\": \"ACCESSIBLE\"\n                },\n                {\n                    \"code\": \"405320\",\n                    \"direction\": \"NE\",\n                    \"id\": \"MTA_405320\",\n                    \"lat\": 40.717171,\n                    \"locationType\": 0,\n                    \"lon\": -73.991223,\n                    \"name\": \"ALLEN ST/GRAND ST\",\n                    \"parent\": \"\",\n                    \"routeIds\": [\n                        \"MTA NYCT_M15\",\n                        \"MTA NYCT_M15+\"\n                    ],\n                    \"staticRouteIds\": [\n                        \"MTA NYCT_M15\",\n                        \"MTA NYCT_M15+\"\n                    ],\n                    \"wheelchairBoarding\": \"ACCESSIBLE\"\n                },\n                {\n                    \"code\": \"404850\",\n                    \"direction\": \"NE\",\n                    \"id\": \"MTA_404850\",\n                    \"lat\": 40.70755,\n                    \"locationType\": 0,\n                    \"lon\": -74.003851,\n                    \"name\": \"PEARL ST/FULTON ST\",\n                    \"parent\": \"\",\n                    \"routeIds\": [\n                        \"MTA NYCT_M15\",\n                        \"MTA NYCT_M15+\",\n                        \"MTA NYCT_SIM5\",\n                        \"MTA NYCT_SIM35\"\n                    ],\n                    \"staticRouteIds\": [\n                        \"MTA NYCT_M15\",\n                        \"MTA NYCT_M15+\",\n                        \"MTA NYCT_SIM5\",\n                        \"MTA NYCT_SIM35\"\n                    ],\n                    \"wheelchairBoarding\": \"ACCESSIBLE\"\n                },\n                {\n                    \"code\": \"405319\",\n                    \"direction\": \"E\",\n                    \"id\": \"MTA_405319\",\n                    \"lat\": 40.711929,\n                    \"locationType\": 0,\n                    \"lon\": -73.997151,\n                    \"name\": \"MADISON ST/CATHERINE ST\",\n                    \"parent\": \"\",\n                    \"routeIds\": [\n                        \"MTA NYCT_M15+\"\n                    ],\n                    \"staticRouteIds\": [\n                        \"MTA NYCT_M15+\"\n                    ],\n                    \"wheelchairBoarding\": \"ACCESSIBLE\"\n                },\n                {\n                    \"code\": \"803121\",\n                    \"direction\": \"SW\",\n                    \"id\": \"MTA_803121\",\n                    \"lat\": 40.702044,\n                    \"locationType\": 0,\n                    \"lon\": -74.013584,\n                    \"name\": \"SOUTH FERRY/TERMINAL\",\n                    \"parent\": \"\",\n                    \"routeIds\": [\n                        \"MTA NYCT_M15+\"\n                    ],\n                    \"staticRouteIds\": [\n                        \"MTA NYCT_M15+\"\n                    ],\n                    \"wheelchairBoarding\": \"ACCESSIBLE\"\n                },\n                {\n                    \"code\": \"401666\",\n                    \"direction\": \"NE\",\n                    \"id\": \"MTA_401666\",\n                    \"lat\": 40.705286,\n                    \"locationType\": 0,\n                    \"lon\": -74.007102,\n                    \"name\": \"WATER ST/WALL ST\",\n                    \"parent\": \"\",\n                    \"routeIds\": [\n                        \"MTA NYCT_M15\",\n                        \"MTA NYCT_M15+\",\n                        \"MTA NYCT_SIM5\",\n                        \"MTA NYCT_SIM35\"\n                    ],\n                    \"staticRouteIds\": [\n                        \"MTA NYCT_M15\",\n                        \"MTA NYCT_M15+\",\n                        \"MTA NYCT_SIM5\",\n                        \"MTA NYCT_SIM35\"\n                    ],\n                    \"wheelchairBoarding\": \"ACCESSIBLE\"\n                },\n                {\n                    \"code\": \"405311\",\n                    \"direction\": \"W\",\n                    \"id\": \"MTA_405311\",\n                    \"lat\": 40.723164,\n                    \"locationType\": 0,\n                    \"lon\": -73.988972,\n                    \"name\": \"E HOUSTON ST/1 AV\",\n                    \"parent\": \"\",\n                    \"routeIds\": [\n                        \"MTA NYCT_M21\"\n                    ],\n                    \"staticRouteIds\": [\n                        \"MTA NYCT_M21\"\n                    ],\n                    \"wheelchairBoarding\": \"ACCESSIBLE\"\n                },\n                {\n                    \"code\": \"F14\",\n                    \"direction\": \"\",\n                    \"id\": \"MTASBWY_F14\",\n                    \"lat\": 40.723402,\n                    \"locationType\": 0,\n                    \"lon\": -73.989938,\n                    \"name\": \"2 Av\",\n                    \"parent\": \"\",\n                    \"routeIds\": [],\n                    \"staticRouteIds\": [],\n                    \"wheelchairBoarding\": \"NOT_ACCESSIBLE\"\n                },\n                {\n                    \"code\": \"F14-entrance-1\",\n                    \"direction\": \"\",\n                    \"id\": \"MTASBWY_F14-entrance-1\",\n                    \"lat\": 40.7232,\n                    \"locationType\": 0,\n                    \"lon\": -73.988863,\n                    \"name\": \"2 Av\",\n                    \"parent\": \"MTASBWY_F14\",\n                    \"routeIds\": [],\n                    \"staticRouteIds\": [],\n                    \"wheelchairBoarding\": \"NOT_ACCESSIBLE\"\n                },\n                {\n                    \"code\": \"401682\",\n                    \"direction\": \"NE\",\n                    \"id\": \"MTA_401682\",\n                    \"lat\": 40.723561,\n                    \"locationType\": 0,\n                    \"lon\": -73.988171,\n                    \"name\": \"1 AV/E 2 ST\",\n                    \"parent\": \"\",\n                    \"routeIds\": [\n                        \"MTA NYCT_M15\"\n                    ],\n                    \"staticRouteIds\": [\n                        \"MTA NYCT_M15\"\n                    ],\n                    \"wheelchairBoarding\": \"ACCESSIBLE\"\n                }\n            ],\n            \"trips\": [\n                {\n                    \"blockId\": \"MTA NYCT_OF_A4-Weekday-061100_SBS15_446\",\n                    \"directionId\": \"0\",\n                    \"id\": \"MTA NYCT_OF_A4-Weekday-061100_SBS15_446\",\n                    \"peakOffpeak\": 0,\n                    \"routeId\": \"MTA NYCT_M15+\",\n                    \"routeShortName\": \"\",\n                    \"serviceId\": \"MTA_d-5\",\n                    \"shapeId\": \"MTA_d-368\",\n                    \"timeZone\": \"\",\n                    \"tripHeadsign\": \"SELECT BUS SERVICE 125 ST via 1 AV\",\n                    \"tripShortName\": \"\"\n                },\n                {\n                    \"blockId\": \"MTA NYCT_OF_A4-Weekday-059600_SBS15_415\",\n                    \"directionId\": \"0\",\n                    \"id\": \"MTA NYCT_OF_A4-Weekday-059600_SBS15_415\",\n                    \"peakOffpeak\": 0,\n                    \"routeId\": \"MTA NYCT_M15+\",\n                    \"routeShortName\": \"\",\n                    \"serviceId\": \"MTA_d-5\",\n                    \"shapeId\": \"MTA_d-369\",\n                    \"timeZone\": \"\",\n                    \"tripHeadsign\": \"SELECT BUS SERVICE 125 ST via 1 AV\",\n                    \"tripShortName\": \"\"\n                },\n                {\n                    \"blockId\": \"MTA NYCT_OF_A4-Weekday-060400_SBS15_416\",\n                    \"directionId\": \"0\",\n                    \"id\": \"MTA NYCT_OF_A4-Weekday-060400_SBS15_416\",\n                    \"peakOffpeak\": 0,\n                    \"routeId\": \"MTA NYCT_M15+\",\n                    \"routeShortName\": \"\",\n                    \"serviceId\": \"MTA_d-5\",\n                    \"shapeId\": \"MTA_d-369\",\n                    \"timeZone\": \"\",\n                    \"tripHeadsign\": \"SELECT BUS SERVICE 125 ST via 1 AV\",\n                    \"tripShortName\": \"\"\n                },\n                {\n                    \"blockId\": \"MTA NYCT_OF_A4-Weekday-061100_SBS15_417\",\n                    \"directionId\": \"0\",\n                    \"id\": \"MTA NYCT_OF_A4-Weekday-061100_SBS15_417\",\n                    \"peakOffpeak\": 0,\n                    \"routeId\": \"MTA NYCT_M15+\",\n                    \"routeShortName\": \"\",\n                    \"serviceId\": \"MTA_d-5\",\n                    \"shapeId\": \"MTA_d-369\",\n                    \"timeZone\": \"\",\n                    \"tripHeadsign\": \"SELECT BUS SERVICE 125 ST via 1 AV\",\n                    \"tripShortName\": \"\"\n                },\n                {\n                    \"blockId\": \"MTA NYCT_OF_A4-Weekday-061800_SBS15_411\",\n                    \"directionId\": \"0\",\n                    \"id\": \"MTA NYCT_OF_A4-Weekday-061800_SBS15_411\",\n                    \"peakOffpeak\": 0,\n                    \"routeId\": \"MTA NYCT_M15+\",\n                    \"routeShortName\": \"\",\n                    \"serviceId\": \"MTA_d-5\",\n                    \"shapeId\": \"MTA_d-369\",\n                    \"timeZone\": \"\",\n                    \"tripHeadsign\": \"SELECT BUS SERVICE 125 ST via 1 AV\",\n                    \"tripShortName\": \"\"\n                },\n                {\n                    \"blockId\": \"MTA NYCT_OF_A4-Weekday-062500_SBS15_419\",\n                    \"directionId\": \"0\",\n                    \"id\": \"MTA NYCT_OF_A4-Weekday-062500_SBS15_419\",\n                    \"peakOffpeak\": 0,\n                    \"routeId\": \"MTA NYCT_M15+\",\n                    \"routeShortName\": \"\",\n                    \"serviceId\": \"MTA_d-5\",\n                    \"shapeId\": \"MTA_d-369\",\n                    \"timeZone\": \"\",\n                    \"tripHeadsign\": \"SELECT BUS SERVICE 125 ST via 1 AV\",\n                    \"tripShortName\": \"\"\n                }\n            ]\n        }\n    },\n    \"text\": \"OK\",\n    \"version\": 2\n}"
				}
			]
		},
		{
			"name": "Bus 302484",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c5089f4f-ea98-4346-814f-9814a092ce7e",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is MTA_302484\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTA_302484\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" headsign is expected\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.include(\"RIDGEWOOD TERM via HALSEY\");",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "444f8151-49a8-485b-93f8-d7ed36e3e3a4",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTA_302484.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTA_302484.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Bus 306945",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "87e4e4f3-62f4-443a-905e-b33561db1749",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is MTA_306945\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTA_306945\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is expected\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.be.oneOf([\"BROWNSVILLE ROCKAWAY AV\",\"BAY RIDGE SHORE RD via 5 AV\"]);",
							"        });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "e67c5742-8ef5-4e28-a827-623c8bbb5360",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTA_306945.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTA_306945.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Bus 400655",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a7e015e0-9ff4-440b-bc46-5cd892824932",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).to.be.oneOf(['CANCELED', 'default']);",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is MTA_400655\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTA_400655\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is expected\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.be.oneOf([\"BROADWAY-135 ST\",\"MIDTOWN & 5 AV via BWAY 5 AV\",\"MIDTOWN 32 ST & 5 AV via BWAY 5 AV\", \"MIDTOWN & 5 AV via BWAY 5 AV\",\"MIDTOWN  32 ST & 5 AV via BWAY 5 AV\", \"31 ST 6 AV\", \"LIMITED 31 ST 6 AV LTD\"]);",
							"        });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"      var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "c00748d0-f4b0-407c-b416-6226d1718f34",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTA_400655.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTA_400655.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Bus 550304",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "93e988b6-210a-41b8-90b2-af703461b07c",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).to.be.oneOf(['CANCELED', 'default']);",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is MTA_550304\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTA_550304\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is expected\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.be.oneOf([\"LIMITED JFK AIRPORT via LEFFERTS BL LTD\",\"B63 - BAY RIDGE SHORE RD via 5 AV\"]);",
							"        });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"      var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "e6bcc3ab-2733-4c51-912d-4fae559fb4e1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTA_550304.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTA_550304.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "LIRR 118",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bbe1a269-f3d0-467e-bac4-ad48466e738d",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    console.log(\"Trip \"+i+\" status \" +arrDeptArray[i].status);",
							"",
							"    pm.test(\"Trip \" +i+ \" validate status\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).to.be.oneOf(['On-Time']);",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).to.be.oneOf([\"CANCELED\", \"SCHEDULED\"]);",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is LI_118\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"LI_118\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is expected\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.be.oneOf([\"Patchogue\", \"Babylon\", \"Penn Station\", \"Grand Central\", \"Montauk\"]);",
							"        });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "87120ce1-7ef2-499c-8012-92458b734780",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/LI_118.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"LI_118.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "LIRR 73",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "32eaee7c-e7f1-4a73-bcea-4aa5438852ea",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    console.log(\"Trip \"+i+\" status \" +arrDeptArray[i].status);",
							"    pm.test(\"Trip \" +i+ \" validate status\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).to.be.oneOf(['On-Time','default']);",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).to.be.oneOf([\"CANCELED\", \"SCHEDULED\"]);",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is LI_73\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"LI_73\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is expected\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.be.oneOf([\"Grand Central\", \"Ronkonkoma\", \"Penn Station\"]);",
							"        });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "f23c6dd9-01c7-45be-a713-18eb350c7524",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/LI_73.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"LI_73.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "LIRR 30",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3f48d243-9191-4af3-94b1-fb8c75b4f997",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    console.log(\"Trip \"+i+\" status \" +arrDeptArray[i].status);",
							"    pm.test(\"Trip \" +i+ \" validate status\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).to.be.oneOf(['On-Time','default']);",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).to.be.oneOf([\"CANCELED\", \"SCHEDULED\"]);",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is LI_30\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"LI_30\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is expected\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.be.oneOf([\"Grand Central\", \"Hempstead\", \"Penn Station\"]);",
							"        });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "aee7a040-ff46-40a0-abbf-5f722a71388b",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/LI_30.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"LI_30.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "MNR 149",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ae4ed5d0-208b-41ab-93ff-8c2324b69f54",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" validate status\", ()=> {",
							"        console.log(\"Trip \"+i+\" status \" +arrDeptArray[i].status);",
							"        ",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).to.be.oneOf(['On-Time','Arriving','Late','Delayed']);",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).to.be.oneOf([\"CANCELED\", \"SCHEDULED\"]);",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is MNR_149\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MNR_149\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is expected\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.be.oneOf([\"Grand Central\",\"New Haven\"]);",
							"        });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "7934871e-0fa5-4f1a-afbb-408a662cf20e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MNR_149.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MNR_149.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "MNR 56",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "18ad1663-73b2-49e1-96fa-7c4105bc64bb",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    console.log(\"Trip \"+i+\" status \" +arrDeptArray[i].status);",
							"    pm.test(\"Trip \" +i+ \" validate status\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).to.be.oneOf([\"CANCELED\", \"SCHEDULED\"]);",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MNR_56\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is expected\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.be.oneOf([\"North White Plains\",\"Stamford\",\"Grand Central\"]);",
							"        });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "cc0c578e-e399-4e1d-9b76-c9bdc54824e7",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MNR_56.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MNR_56.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "MNR 124",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bca89418-4bb8-4fdf-b945-473758ac7cd6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    console.log(\"Trip \"+i+\" status \" +arrDeptArray[i].status);",
							"    pm.test(\"Trip \" +i+ \" validate status\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).to.be.oneOf([\"CANCELED\", \"SCHEDULED\"]);",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MNR_124\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is expected\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.be.oneOf([\"New Haven\",\"Grand Central\",\"Stamford\", \"New Canaan\"]);",
							"        });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "746f6a5b-5b81-4386-9681-662a0aa759db",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MNR_124.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MNR_124.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway 142N, 1 line, Dev",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bca89418-4bb8-4fdf-b945-473758ac7cd6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"console.log(\"****************\");",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"var realtimeTrips=0;",
							"var canceledTrips=0;",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"   ",
							"   if(arrDeptArray[i].predicted == true) {",
							"        realtimeTrips = realtimeTrips+1;",
							"    }",
							"    if(arrDeptArray[i].status==='CANCELED'){",
							"        canceledTrips = canceledTrips+1;",
							"    }",
							"",
							" //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId+\" headsign: \"+arrDeptArray[i].tripHeadsign);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        //console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"Total trips: \" +arrDeptArray.length+ \", Realtime: \" +realtimeTrips+ \", Canceled: \" +canceledTrips);",
							"",
							"pm.test(\"Most trips are realtime\", function() {",
							"    pm.expect(realtimeTrips).to.be.greaterThan(arrDeptArray.length/2);",
							"});",
							"",
							"console.log(\"**************** end\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "60c1f6ed-341f-460f-b7b4-6df688f9522f",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_142N.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_142N.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway A48N 1 line, Dev",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bca89418-4bb8-4fdf-b945-473758ac7cd6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"console.log(\"****************\");",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"var realtimeTrips=0;",
							"var canceledTrips=0;",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"   ",
							"   if(arrDeptArray[i].predicted == true) {",
							"        realtimeTrips = realtimeTrips+1;",
							"    }",
							"    if(arrDeptArray[i].status==='CANCELED'){",
							"        canceledTrips = canceledTrips+1;",
							"    }",
							"",
							" //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId+\" headsign: \"+arrDeptArray[i].tripHeadsign);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        //console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"Total trips: \" +arrDeptArray.length+ \", Realtime: \" +realtimeTrips+ \", Canceled: \" +canceledTrips);",
							"",
							"pm.test(\"Most trips are realtime\", function() {",
							"    pm.expect(realtimeTrips).to.be.greaterThan(arrDeptArray.length/2);",
							"});",
							"",
							"console.log(\"**************** end\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "0723ff80-7e7b-43c6-a197-eaee4dd112d1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_A48N.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_A48N.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway R14N, Dev",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bca89418-4bb8-4fdf-b945-473758ac7cd6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"console.log(\"****************\");",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"var realtimeTrips=0;",
							"var canceledTrips=0;",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"   ",
							"   if(arrDeptArray[i].predicted == true) {",
							"        realtimeTrips = realtimeTrips+1;",
							"    }",
							"    if(arrDeptArray[i].status==='CANCELED'){",
							"        canceledTrips = canceledTrips+1;",
							"    }",
							"",
							" //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId+\" headsign: \"+arrDeptArray[i].tripHeadsign);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        //console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"Total trips: \" +arrDeptArray.length+ \", Realtime: \" +realtimeTrips+ \", Canceled: \" +canceledTrips);",
							"",
							"pm.test(\"Most trips are realtime\", function() {",
							"    pm.expect(realtimeTrips).to.be.greaterThan(arrDeptArray.length/2);",
							"});",
							"",
							"console.log(\"**************** end\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "ba358eb5-c96a-496e-8d4d-495b55d0edbe",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_R14N.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_R14N.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ADL 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bca89418-4bb8-4fdf-b945-473758ac7cd6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"console.log(\"****************\");",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"    pm.test(\"Trip \" +i+ \" stop\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.be.oneOf([\"MTA_401250\",\"MTA_404136\"]);",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeId\", function () {",
							"        pm.expect(arrDeptArray[i].routeId).to.be.oneOf([\"MTA NYCT_M10\"]);",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.be.oneOf([\"HARLEM 159 ST via 8 AV\",\"M10 - BROADWAY / WEST 57 ST\"]);",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"M10\"]);",
							"    });",
							"    ",
							"    pm.test(\"Trip \" +i+ \" routeLongName\", function () {",
							"        pm.expect(arrDeptArray[i].routeLongName).to.be.oneOf([\"Harlem - Columbus Circle\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"var realtimeTrips=0;",
							"var canceledTrips=0;",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"   ",
							"   if(arrDeptArray[i].predicted == true) {",
							"        realtimeTrips = realtimeTrips+1;",
							"    }",
							"    if(arrDeptArray[i].status==='CANCELED'){",
							"        canceledTrips = canceledTrips+1;",
							"    }",
							"",
							" //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId+\" headsign: \"+arrDeptArray[i].tripHeadsign);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        //console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"Total trips: \" +arrDeptArray.length+ \", Realtime: \" +realtimeTrips+ \", Canceled: \" +canceledTrips);",
							"",
							"pm.test(\"Most trips are realtime\", function() {",
							"    pm.expect(realtimeTrips).to.be.greaterThan(arrDeptArray.length/2);",
							"});",
							"",
							"console.log(\"**************** end\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "5df0464b-f908-4347-b40b-43b494631b27",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-location.json?key=OBA&lat=40.780580&lon=-73.973584&latSpan=0.002&lonSpan=0.002",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-location.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						},
						{
							"key": "lat",
							"value": "40.780580"
						},
						{
							"key": "lon",
							"value": "-73.973584"
						},
						{
							"key": "latSpan",
							"value": "0.002"
						},
						{
							"key": "lonSpan",
							"value": "0.002"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ADL 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bca89418-4bb8-4fdf-b945-473758ac7cd6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"console.log(\"****************\");",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"    pm.test(\"Trip \" +i+ \" stop\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.be.oneOf([\"MTA_404320\"]);",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" routeId\", function () {",
							"        pm.expect(arrDeptArray[i].routeId).to.be.oneOf([\"MTA NYCT_M11\",\"MTA NYCT_M7\"]);",
							"        }); ",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.be.oneOf([\"M10 - BROADWAY / WEST 57 ST\", \"HARLEM 147 ST via 6 AV via AMSTERDAM\", \"RIVERBANK 145 ST via 10 AV\"]);",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"M11\",\"M7\"]);",
							"    });",
							"    ",
							"    pm.test(\"Trip \" +i+ \" routeLongName\", function () {",
							"        pm.expect(arrDeptArray[i].routeLongName).to.be.oneOf([\"Riverbank Park & Harlem - West Village\", \"Harlem - 14th Street\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"var realtimeTrips=0;",
							"var canceledTrips=0;",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"   ",
							"   if(arrDeptArray[i].predicted == true) {",
							"        realtimeTrips = realtimeTrips+1;",
							"    }",
							"    if(arrDeptArray[i].status==='CANCELED'){",
							"        canceledTrips = canceledTrips+1;",
							"    }",
							"",
							" //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId+\" headsign: \"+arrDeptArray[i].tripHeadsign);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        //console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"Total trips: \" +arrDeptArray.length+ \", Realtime: \" +realtimeTrips+ \", Canceled: \" +canceledTrips);",
							"",
							"pm.test(\"Most trips are realtime\", function() {",
							"    pm.expect(realtimeTrips).to.be.greaterThan(arrDeptArray.length/2);",
							"});",
							"",
							"console.log(\"**************** end\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "fcccc205-eddf-4f19-91ae-d96c0e382f86",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-location.json?key=OBA&lat=40.789410&lon=-73.973596&latSpan=0.001&lonSpan=0.001",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-location.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						},
						{
							"key": "lat",
							"value": "40.789410"
						},
						{
							"key": "lon",
							"value": "-73.973596"
						},
						{
							"key": "latSpan",
							"value": "0.001"
						},
						{
							"key": "lonSpan",
							"value": "0.001"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ADL 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bca89418-4bb8-4fdf-b945-473758ac7cd6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"console.log(\"****************\");",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"    pm.test(\"Trip \" +i+ \" stop\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.be.oneOf([\"MTASBWY_121N\", \"MTASBWY_121S\"]);",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" routeId\", function () {",
							"        pm.expect(arrDeptArray[i].routeId).to.be.oneOf([\"MTASBWY_1\"]);",
							"        }); ",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.be.oneOf([\"Downtown\", \"Uptown & The Bronx\"]);",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"1\"]);",
							"    });",
							"    ",
							"    pm.test(\"Trip \" +i+ \" routeLongName\", function () {",
							"        pm.expect(arrDeptArray[i].routeLongName).to.be.oneOf([\"Broadway - 7 Avenue Local\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"var realtimeTrips=0;",
							"var canceledTrips=0;",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"   ",
							"   if(arrDeptArray[i].predicted == true) {",
							"        realtimeTrips = realtimeTrips+1;",
							"    }",
							"    if(arrDeptArray[i].status==='CANCELED'){",
							"        canceledTrips = canceledTrips+1;",
							"    }",
							"",
							" //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId+\" headsign: \"+arrDeptArray[i].tripHeadsign);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        //console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"Total trips: \" +arrDeptArray.length+ \", Realtime: \" +realtimeTrips+ \", Canceled: \" +canceledTrips);",
							"",
							"pm.test(\"Most trips are realtime\", function() {",
							"    pm.expect(realtimeTrips).to.be.greaterThan(arrDeptArray.length/2);",
							"});",
							"",
							"console.log(\"**************** end\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "2aa7b089-7605-4ca1-a939-34d0b36b8198",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-location.json?key=OBA&lat=40.7886405&lon=-73.9762600&latSpan=0.002&lonSpan=0.002&routeType=1",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-location.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						},
						{
							"key": "lat",
							"value": "40.7886405"
						},
						{
							"key": "lon",
							"value": "-73.9762600"
						},
						{
							"key": "latSpan",
							"value": "0.002"
						},
						{
							"key": "lonSpan",
							"value": "0.002"
						},
						{
							"key": "routeType",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ADL 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bca89418-4bb8-4fdf-b945-473758ac7cd6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"console.log(\"****************\");",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"    pm.test(\"Trip \" +i+ \" stop\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.be.oneOf([\"LI_56\"]);",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" routeId\", function () {",
							"        pm.expect(arrDeptArray[i].routeId).to.be.oneOf([\"LI_4\", \"LI_10\"]);",
							"        }); ",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.be.oneOf([\"Huntington\", \"Grand Central\",\"Penn Station\",\"Ronkonkoma\"]);",
							"        });",
							"    ",
							"    pm.test(\"Trip \" +i+ \" routeLongName\", function () {",
							"        pm.expect(arrDeptArray[i].routeLongName).to.be.oneOf([\"Ronkonkoma Branch\", \"Port Jefferson Branch\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"var realtimeTrips=0;",
							"var canceledTrips=0;",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"   ",
							"   if(arrDeptArray[i].predicted == true) {",
							"        realtimeTrips = realtimeTrips+1;",
							"    }",
							"    if(arrDeptArray[i].status==='CANCELED'){",
							"        canceledTrips = canceledTrips+1;",
							"    }",
							"",
							" //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId+\" headsign: \"+arrDeptArray[i].tripHeadsign);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        //console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"Total trips: \" +arrDeptArray.length+ \", Realtime: \" +realtimeTrips+ \", Canceled: \" +canceledTrips);",
							"",
							"pm.test(\"Most trips are realtime\", function() {",
							"    pm.expect(realtimeTrips).to.be.greaterThan(arrDeptArray.length/2);",
							"});",
							"",
							"console.log(\"**************** end\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "36ae904b-1c00-4c48-97c3-0eda5bd6a513",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-location.json?key=OBA&lat=40.738213&lon=-73.526694&latSpan=0.08&lonSpan=0.08",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-location.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						},
						{
							"key": "lat",
							"value": "40.738213"
						},
						{
							"key": "lon",
							"value": "-73.526694"
						},
						{
							"key": "latSpan",
							"value": "0.08"
						},
						{
							"key": "lonSpan",
							"value": "0.08"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ADL alerts",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bca89418-4bb8-4fdf-b945-473758ac7cd6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var alertArray = jsonData.entity;",
							"",
							"console.log(\"****************\");",
							"",
							"if (alertArray.length > 0) {",
							"//iterate through this and check all",
							"    for (let i = 0; i < alertArray.length; i++) {",
							"",
							"        pm.test(\"alert \" +i+ \" \", function () {",
							"            //pm.expect(alertArray[i].id).to.be.oneOf([\"LI_56\"]);",
							"            pm.expect(alertArray[i].id).to.include(\"lmm\");",
							"            });",
							"    }",
							"}",
							"else {",
							"    console.log(\"No alerts returned :(\");",
							"}",
							"//console.log(\"Total trips: \" +arrDeptArray.length+ \", Realtime: \" +realtimeTrips+ \", Canceled: \" +canceledTrips);",
							"",
							"",
							"console.log(\"**************** end\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "d6aae56c-93be-45ff-9991-758e8fdaa6cc",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/realtime/v2/gtfsrt/ALL/alerts?type=json&key=oba",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"realtime",
						"v2",
						"gtfsrt",
						"ALL",
						"alerts"
					],
					"query": [
						{
							"key": "type",
							"value": "json"
						},
						{
							"key": "key",
							"value": "oba"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test Plan Call With Lat/Long",
			"id": "9eea2492-b348-4e75-a2b6-6f12bb0860fb",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-prod.camsys-apps.com/routing/v2/routers/default/plan?fromPlace=40.878786,-73.904842&toPlace=40.644033,-74.076681&key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-prod",
						"camsys-apps",
						"com"
					],
					"path": [
						"routing",
						"v2",
						"routers",
						"default",
						"plan"
					],
					"query": [
						{
							"key": "fromPlace",
							"value": "40.878786,-73.904842"
						},
						{
							"key": "toPlace",
							"value": "40.644033,-74.076681"
						},
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "ab3ce071-c285-4912-b333-eaed3635f53a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "3cf6fec5-f023-4686-80a1-5febbcb4a803",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "env",
			"value": "dev",
			"type": "string"
		}
	]
}