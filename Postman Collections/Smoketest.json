{
	"info": {
		"_postman_id": "d5e9ec83-ab4b-4102-8824-cb60dc82bba1",
		"name": "Pristine Smoke Test - Prod",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Subway A48N A or C; ADS1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is A48N\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_A48N\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is Manhattan\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.eql(\"Manhattan\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName is A or C\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"A\",\"C\"]);",
							"    });",
							"    ",
							"    pm.test(\"Trip \" +i+ \" routeId\", function () {",
							"        pm.expect(arrDeptArray[i].routeId).to.be.oneOf([\"MTASBWY_A\",\"MTASBWY_C\"]);",
							"        }); ",
							"    ",
							"    pm.test(\"Trip \" +i+ \" routeLongName\", function () {",
							"        pm.expect(arrDeptArray[i].routeLongName).to.be.oneOf([\"8 Avenue Express\",\"8 Avenue Local\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"var realtimeTrips=0;",
							"var canceledTrips=0;",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"   ",
							"   if(arrDeptArray[i].predicted == true) {",
							"        realtimeTrips = realtimeTrips+1;",
							"    }",
							"    if(arrDeptArray[i].status==='CANCELED'){",
							"        canceledTrips = canceledTrips+1;",
							"    }",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"        //console.log(\"No realtime. Trip\"+i+\" is using scheduled data\"+\" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"Total trips: \" +arrDeptArray.length+ \" Realtime: \" +realtimeTrips+ \" Canceled: \" +canceledTrips);",
							"",
							"pm.test(\"Most trips are realtime\", function() {",
							"    pm.expect(realtimeTrips).to.be.greaterThan(arrDeptArray.length/2);",
							"});",
							"",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "280cc812-6d92-414a-afdc-5b0ed37d7e96",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_A48N.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_A48N.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway 720N; ADS2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is 720N\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_720N\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is Manhattan\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.eql(\"Flushing\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName is A or C\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"7\",\"7X\"]);",
							"    });",
							"    ",
							"    pm.test(\"Trip \" +i+ \" routeId\", function () {",
							"        pm.expect(arrDeptArray[i].routeId).to.be.oneOf([\"MTASBWY_7\",\"MTASBWY_7X\"]);",
							"        }); ",
							"    ",
							"    pm.test(\"Trip \" +i+ \" routeLongName\", function () {",
							"        pm.expect(arrDeptArray[i].routeLongName).to.be.oneOf([\"Flushing Local\",\"Flushing Express\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"var realtimeTrips=0;",
							"var canceledTrips=0;",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"   ",
							"   if(arrDeptArray[i].predicted == true) {",
							"        realtimeTrips = realtimeTrips+1;",
							"    }",
							"    if(arrDeptArray[i].status==='CANCELED'){",
							"        canceledTrips = canceledTrips+1;",
							"    }",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"        //console.log(\"No realtime. Trip\"+i+\" is using scheduled data\"+\" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"Total trips: \" +arrDeptArray.length+ \" Realtime: \" +realtimeTrips+ \" Canceled: \" +canceledTrips);",
							"",
							"pm.test(\"Most trips are realtime\", function() {",
							"    pm.expect(realtimeTrips).to.be.greaterThan(arrDeptArray.length/2);",
							"});",
							"",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "9d09300a-2370-453d-9446-97335c80707c",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_720N.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_720N.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway A48S A or C",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bca89418-4bb8-4fdf-b945-473758ac7cd6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is A48S\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_A48S\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is Lefferts\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.eql(\"Lefferts Blvd & The Rockaways\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" routeShortName is A or C\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"A\",\"C\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "9ac2817b-0f25-42c3-b98e-415fde799a84",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_A48S.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_A48S.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway A42N A, C or G",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is A42N\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_A42N\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign\", function () {",
							"         pm.expect(arrDeptArray[i].tripHeadsign).to.be.oneOf([\"Manhattan\",\"Manhattan & Church Av\",\"Court Sq\"]);",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName is A, C, G\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"A\",\"C\", \"G\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "383e0158-4f40-4b81-8c98-1cdc80de6155",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_A42N.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_A42N.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway 117N 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is 117N\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_117N\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName is 1\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"1\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "b6cddea3-c04e-43c8-bdef-29efc1426542",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_117N.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_117N.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway 108S 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is 108S\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_108S\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName is 1\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"1\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "a0717f2a-5ddf-4de4-bcd7-b157d407a331",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_108S.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_108S.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway 208S 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is 208S\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_208S\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is Manhattan\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.eql(\"Manhattan\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName is 2\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"2\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "2f6b4851-c2ba-4bc3-9e7e-ac7d624741a9",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_208S.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_208S.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway 238S 2 or 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is 238S\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_238S\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is Flatbush etc\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.eql(\"Flatbush Av & New Lots Av\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName is 2 or 3\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"2\", \"3\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "cd34f9cb-7275-4d37-941e-0d5b79953ce4",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_238S.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_238S.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway H13S S",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is H13S\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_H13S\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is Rockaway Park\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.eql(\"Rockaway Park\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName is S\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"S\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "05b70e16-a092-404a-9f98-fbe02a1d576e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_H13S.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_H13S.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway D26N S, B or Q",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is D26N\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_D26N\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is Manhattan\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.include(\"Manhattan\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName is S, B or Q\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"S\", \"B\", \"Q\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "8912ea80-c7da-4bc6-bacd-ce1740f49194",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_D26N.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_D26N.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway 707N 7",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is 707N\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_707N\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is Flushing\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.eql(\"Flushing\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"7\",\"7X\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "8e5ff6ce-756d-4d7c-8103-984ab7701dc1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_707N.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_707N.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway 714S 7",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is 714S\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_714S\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is Manhattan\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.eql(\"Manhattan\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName is 7\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"7\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "a8665961-d273-4193-b7d7-8724b687ca78",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_714S.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_714S.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway S17N SIR",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is S17N\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_S17N\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is St George\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.eql(\"St George\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName is SIR\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"SIR\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "a1d71dc3-7136-4458-8d63-07993f985db9",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_S17N.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_S17N.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway 411N 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is 411N\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_411N\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is Woodlawn\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.include(\"Woodlawn\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName is 4\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"4\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "ec7f37ac-04a5-4e27-9fd8-e23d09e399a9",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_411N.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_411N.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway 505S 5",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is 505S\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_505S\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is \", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.include(\"Manhattan\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName is 5\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"5\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "f0bb1b6d-dc40-47c7-bc9e-f0ce7760e289",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_505S.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_505S.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway G16N M or R",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603ca5c0-283f-4c52-82a1-52db1bc172f6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is G16N\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTASBWY_G16N\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is Forest Hills\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.include(\"Forest Hills\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName is M or R\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"M\", \"R\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "dfd788d6-00c5-4bdd-b2ce-253abf8bb5a8",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_G16N.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_G16N.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Bus 306619",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9314f214-02b5-49ae-9c0c-cf16b231733f",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is MTA_306619\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTA_306619\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is Brooklyn Bridge\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.include(\"B63 - BROOKLYN BRIDGE\");",
							"        });",
							"}",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "52dabe69-339b-4036-8e75-6674e4099fae",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTA_306619.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTA_306619.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Bus 100209",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9314f214-02b5-49ae-9c0c-cf16b231733f",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is MTA_100209\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTA_100209\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is Westchester\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.include(\"WESTCHESTER\");",
							"        });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "88f9052a-1d51-4d4e-87d2-cc372e955339",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTA_100209.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTA_100209.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Bus 301045",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9314f214-02b5-49ae-9c0c-cf16b231733f",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is MTA_301045\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTA_301045\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is BED_STUY\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.include(\"BED-STUY\");",
							"        });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"      var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "04c5252f-c43a-45b5-bfc4-04c45ff78af1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTA_301045.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTA_301045.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Bus 3024848",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c5089f4f-ea98-4346-814f-9814a092ce7e",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is MTA_302484\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTA_302484\");",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" headsign is expected\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.include(\"RIDGEWOOD TERM via HALSEY\");",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"      var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "d675d4e7-a273-43f7-9ece-08b9475a8dc4",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTA_302484.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTA_302484.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Bus 306945",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "87e4e4f3-62f4-443a-905e-b33561db1749",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is MTA_306945\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTA_306945\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is expected\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.be.oneOf([\"BROWNSVILLE ROCKAWAY AV\",\"BAY RIDGE SHORE RD via 5 AV\"]);",
							"        });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"      var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "0a4357f8-a112-4ea7-bec4-255a8cc63f59",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTA_306945.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTA_306945.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Bus 400655",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a7e015e0-9ff4-440b-bc46-5cd892824932",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is MTA_400655\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTA_400655\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is expected\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.be.oneOf([\"BROADWAY-135 ST\",\"MIDTOWN & 5 AV via BWAY 5 AV\",\"MIDTOWN 32 ST & 5 AV via BWAY 5 AV\", \"31 ST 6 AV\"]);",
							"        });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"      var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "003e5182-b9dc-4ff7-8778-68fb770aaad5",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTA_400655.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTA_400655.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Bus 550304",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "93e988b6-210a-41b8-90b2-af703461b07c",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is MTA_550304\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MTA_550304\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is expected\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.be.oneOf([\"LIMITED JFK AIRPORT via LEFFERTS BL LTD\",\"B63 - BAY RIDGE SHORE RD via 5 AV\"]);",
							"        });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"      var status = arrDeptArray[i].status;",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "96447794-aff2-4ccd-8831-3e1682c395f6",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTA_550304.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTA_550304.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "LIRR 118",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bbe1a269-f3d0-467e-bac4-ad48466e738d",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    //console.log(\"Trip \"+i+\" status \" +arrDeptArray[i].status);",
							"",
							"    pm.test(\"Trip \" +i+ \" validate status\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).to.be.oneOf(['On-Time']);",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).to.be.oneOf([\"CANCELED\", \"SCHEDULED\"]);",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is LI_118\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"LI_118\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is expected\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.be.oneOf([\"Patchogue\", \"Babylon\", \"Penn Station\", \"Grand Central\", \"Montauk\"]);",
							"        });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"   console.log(\"***!!!: STATUS \" + status + \" trip: \"+route+\":\"+tripId);",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "ed1674d7-96b2-47ba-aca2-e00ebde8cc40",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/LI_118.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"LI_118.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "LIRR 73",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "32eaee7c-e7f1-4a73-bcea-4aa5438852ea",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" validate status\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).to.be.oneOf(['On-Time','default']);",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).to.be.oneOf([\"CANCELED\", \"SCHEDULED\"]);",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is LI_73\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"LI_73\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is expected\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.be.oneOf([\"Grand Central\", \"Ronkonkoma\", \"Penn Station\"]);",
							"        });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"   console.log(\"***!!!: STATUS \" + status + \" trip: \"+route+\":\"+tripId);",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "75fb2582-a821-4b1c-88b6-f4594987182b",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/LI_73.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"LI_73.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "LIRR 30",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3f48d243-9191-4af3-94b1-fb8c75b4f997",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" validate status\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).to.be.oneOf(['On-Time','default']);",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).to.be.oneOf([\"CANCELED\", \"SCHEDULED\"]);",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is LI_30\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"LI_30\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is expected\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.be.oneOf([\"Grand Central\", \"Hempstead\", \"Penn Station\"]);",
							"        });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"   console.log(\"***!!!: STATUS \" + status + \" trip: \"+route+\":\"+tripId);",
							"   ",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "2e258d02-dca0-47bd-87e4-673bc2d1f94b",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/LI_30.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"LI_30.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "MNR 149",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ae4ed5d0-208b-41ab-93ff-8c2324b69f54",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" validate status\", ()=> {",
							"        //console.log(\"Trip \"+i+\" status \" +arrDeptArray[i].status + \" route: \" +route+\":\"+tripId);",
							"",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).to.be.oneOf(['On-Time','Arriving','Late','Delayed']);",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).to.be.oneOf([\"CANCELED\", \"SCHEDULED\"]);",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop is MNR_149\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MNR_149\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is expected\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.be.oneOf([\"Grand Central\",\"New Haven\"]);",
							"        });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"   console.log(\"***!!!: STATUS \" + status + \" trip: \"+route+\":\"+tripId);",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "18c1c95c-52cd-48e9-b004-c51325370bec",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MNR_149.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MNR_149.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "MNR 56",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "18ad1663-73b2-49e1-96fa-7c4105bc64bb",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" validate status\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).to.be.oneOf([\"CANCELED\", \"SCHEDULED\"]);",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MNR_56\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is expected\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.be.oneOf([\"North White Plains\",\"Stamford\",\"Grand Central\"]);",
							"        });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"   console.log(\"***!!!: STATUS \" + status + \" trip: \"+route+\":\"+tripId);",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "f0886a82-ab28-4dcd-a72e-c254c26b1329",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MNR_56.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MNR_56.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "MNR 124",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bca89418-4bb8-4fdf-b945-473758ac7cd6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" validate status\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).to.be.oneOf([\"CANCELED\", \"SCHEDULED\"]);",
							"        }",
							"    });",
							"",
							"    pm.test(\"Trip \" +i+ \" stop\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.eql(\"MNR_124\");",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign is expected\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.be.oneOf([\"New Haven\",\"Grand Central\",\"Stamford\", \"New Canaan\"]);",
							"        });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId+\" headsign: \"+arrDeptArray[0].tripHeadsign);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"",
							"   console.log(\"***!!!: STATUS \" + status + \" trip: \"+route+\":\"+tripId);",
							"",
							"    //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"**************** end\");",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "828261ad-1d24-4928-aad5-f22cdb09dd9e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MNR_124.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MNR_124.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway 142N, 1 line, Dev",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bca89418-4bb8-4fdf-b945-473758ac7cd6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"console.log(\"****************\");",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"var realtimeTrips=0;",
							"var canceledTrips=0;",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"   ",
							"   if(arrDeptArray[i].predicted == true) {",
							"        realtimeTrips = realtimeTrips+1;",
							"    }",
							"    if(arrDeptArray[i].status==='CANCELED'){",
							"        canceledTrips = canceledTrips+1;",
							"    }",
							"",
							" //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId+\" headsign: \"+arrDeptArray[i].tripHeadsign);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        //console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"Total trips: \" +arrDeptArray.length+ \", Realtime: \" +realtimeTrips+ \", Canceled: \" +canceledTrips);",
							"",
							"pm.test(\"Most trips are realtime\", function() {",
							"    pm.expect(realtimeTrips).to.be.greaterThan(arrDeptArray.length/2);",
							"});",
							"",
							"console.log(\"**************** end\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "36b89601-634b-4687-893f-cf85c34eb812",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_142N.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_142N.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway A48N 1 line, Dev",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bca89418-4bb8-4fdf-b945-473758ac7cd6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"console.log(\"****************\");",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"var realtimeTrips=0;",
							"var canceledTrips=0;",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"   ",
							"   if(arrDeptArray[i].predicted == true) {",
							"        realtimeTrips = realtimeTrips+1;",
							"    }",
							"    if(arrDeptArray[i].status==='CANCELED'){",
							"        canceledTrips = canceledTrips+1;",
							"    }",
							"",
							" //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId+\" headsign: \"+arrDeptArray[i].tripHeadsign);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        //console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"Total trips: \" +arrDeptArray.length+ \", Realtime: \" +realtimeTrips+ \", Canceled: \" +canceledTrips);",
							"",
							"pm.test(\"Most trips are realtime\", function() {",
							"    pm.expect(realtimeTrips).to.be.greaterThan(arrDeptArray.length/2);",
							"});",
							"",
							"console.log(\"**************** end\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "ce032712-430b-49f3-8e90-3d29102cb3ca",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_A48N.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_A48N.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Subway R14N, Dev",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bca89418-4bb8-4fdf-b945-473758ac7cd6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"console.log(\"****************\");",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"var realtimeTrips=0;",
							"var canceledTrips=0;",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"   ",
							"   if(arrDeptArray[i].predicted == true) {",
							"        realtimeTrips = realtimeTrips+1;",
							"    }",
							"    if(arrDeptArray[i].status==='CANCELED'){",
							"        canceledTrips = canceledTrips+1;",
							"    }",
							"",
							" //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId+\" headsign: \"+arrDeptArray[i].tripHeadsign);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        //console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"Total trips: \" +arrDeptArray.length+ \", Realtime: \" +realtimeTrips+ \", Canceled: \" +canceledTrips);",
							"",
							"pm.test(\"Most trips are realtime\", function() {",
							"    pm.expect(realtimeTrips).to.be.greaterThan(arrDeptArray.length/2);",
							"});",
							"",
							"console.log(\"**************** end\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "e8973d0e-2a70-4e62-ade8-e8bee4c28f19",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-stop/MTASBWY_R14N.json?key=OBA",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-stop",
						"MTASBWY_R14N.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ADL 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bca89418-4bb8-4fdf-b945-473758ac7cd6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"console.log(\"****************\");",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"    pm.test(\"Trip \" +i+ \" stop\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.be.oneOf([\"MTA_401250\",\"MTA_404136\"]);",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeId\", function () {",
							"        pm.expect(arrDeptArray[i].routeId).to.be.oneOf([\"MTA NYCT_M10\"]);",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.be.oneOf([\"HARLEM 159 ST via 8 AV\",\"M10 - BROADWAY / WEST 57 ST\"]);",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"M10\"]);",
							"    });",
							"    ",
							"    pm.test(\"Trip \" +i+ \" routeLongName\", function () {",
							"        pm.expect(arrDeptArray[i].routeLongName).to.be.oneOf([\"Harlem - Columbus Circle\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"var realtimeTrips=0;",
							"var canceledTrips=0;",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"   ",
							"   if(arrDeptArray[i].predicted == true) {",
							"        realtimeTrips = realtimeTrips+1;",
							"    }",
							"    if(arrDeptArray[i].status==='CANCELED'){",
							"        canceledTrips = canceledTrips+1;",
							"    }",
							"",
							" //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId+\" headsign: \"+arrDeptArray[i].tripHeadsign);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        //console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"Total trips: \" +arrDeptArray.length+ \", Realtime: \" +realtimeTrips+ \", Canceled: \" +canceledTrips);",
							"",
							"pm.test(\"Most trips are realtime\", function() {",
							"    pm.expect(realtimeTrips).to.be.greaterThan(arrDeptArray.length/2);",
							"});",
							"",
							"console.log(\"**************** end\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "d5e34f75-bcfe-4752-9855-10843fed3f42",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-location.json?key=OBA&lat=40.780580&lon=-73.973584&latSpan=0.002&lonSpan=0.002",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-location.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						},
						{
							"key": "lat",
							"value": "40.780580"
						},
						{
							"key": "lon",
							"value": "-73.973584"
						},
						{
							"key": "latSpan",
							"value": "0.002"
						},
						{
							"key": "lonSpan",
							"value": "0.002"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ADL 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bca89418-4bb8-4fdf-b945-473758ac7cd6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"console.log(\"****************\");",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"    pm.test(\"Trip \" +i+ \" stop\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.be.oneOf([\"MTA_404320\"]);",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" routeId\", function () {",
							"        pm.expect(arrDeptArray[i].routeId).to.be.oneOf([\"MTA NYCT_M11\",\"MTA NYCT_M7\"]);",
							"        }); ",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.be.oneOf([\"M10 - BROADWAY / WEST 57 ST\", \"HARLEM 147 ST via 6 AV via AMSTERDAM\", \"RIVERBANK 145 ST via 10 AV\"]);",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"M11\",\"M7\"]);",
							"    });",
							"    ",
							"    pm.test(\"Trip \" +i+ \" routeLongName\", function () {",
							"        pm.expect(arrDeptArray[i].routeLongName).to.be.oneOf([\"Riverbank Park & Harlem - West Village\", \"Harlem - 14th Street\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"var realtimeTrips=0;",
							"var canceledTrips=0;",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"   ",
							"   if(arrDeptArray[i].predicted == true) {",
							"        realtimeTrips = realtimeTrips+1;",
							"    }",
							"    if(arrDeptArray[i].status==='CANCELED'){",
							"        canceledTrips = canceledTrips+1;",
							"    }",
							"",
							" //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId+\" headsign: \"+arrDeptArray[i].tripHeadsign);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        //console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"Total trips: \" +arrDeptArray.length+ \", Realtime: \" +realtimeTrips+ \", Canceled: \" +canceledTrips);",
							"",
							"pm.test(\"Most trips are realtime\", function() {",
							"    pm.expect(realtimeTrips).to.be.greaterThan(arrDeptArray.length/2);",
							"});",
							"",
							"console.log(\"**************** end\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "971037e4-bf18-4d79-bc32-efd59c91b799",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-location.json?key=OBA&lat=40.789410&lon=-73.973596&latSpan=0.001&lonSpan=0.001",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-location.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						},
						{
							"key": "lat",
							"value": "40.789410"
						},
						{
							"key": "lon",
							"value": "-73.973596"
						},
						{
							"key": "latSpan",
							"value": "0.001"
						},
						{
							"key": "lonSpan",
							"value": "0.001"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ADL 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bca89418-4bb8-4fdf-b945-473758ac7cd6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"console.log(\"****************\");",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"    pm.test(\"Trip \" +i+ \" stop\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.be.oneOf([\"MTASBWY_121N\", \"MTASBWY_121S\"]);",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" routeId\", function () {",
							"        pm.expect(arrDeptArray[i].routeId).to.be.oneOf([\"MTASBWY_1\"]);",
							"        }); ",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.be.oneOf([\"Downtown\", \"Uptown & The Bronx\"]);",
							"        });",
							"",
							"    pm.test(\"Trip \" +i+ \" routeShortName\", function () {",
							"        pm.expect(arrDeptArray[i].routeShortName).to.be.oneOf([\"1\"]);",
							"    });",
							"    ",
							"    pm.test(\"Trip \" +i+ \" routeLongName\", function () {",
							"        pm.expect(arrDeptArray[i].routeLongName).to.be.oneOf([\"Broadway - 7 Avenue Local\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"var realtimeTrips=0;",
							"var canceledTrips=0;",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"   ",
							"   if(arrDeptArray[i].predicted == true) {",
							"        realtimeTrips = realtimeTrips+1;",
							"    }",
							"    if(arrDeptArray[i].status==='CANCELED'){",
							"        canceledTrips = canceledTrips+1;",
							"    }",
							"",
							" //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId+\" headsign: \"+arrDeptArray[i].tripHeadsign);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        //console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"Total trips: \" +arrDeptArray.length+ \", Realtime: \" +realtimeTrips+ \", Canceled: \" +canceledTrips);",
							"",
							"pm.test(\"Most trips are realtime\", function() {",
							"    pm.expect(realtimeTrips).to.be.greaterThan(arrDeptArray.length/2);",
							"});",
							"",
							"console.log(\"**************** end\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "0a695a39-7854-41bd-8a98-a5026694aa40",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-location.json?key=OBA&lat=40.7886405&lon=-73.9762600&latSpan=0.002&lonSpan=0.002&routeType=1",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-location.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						},
						{
							"key": "lat",
							"value": "40.7886405"
						},
						{
							"key": "lon",
							"value": "-73.9762600"
						},
						{
							"key": "latSpan",
							"value": "0.002"
						},
						{
							"key": "lonSpan",
							"value": "0.002"
						},
						{
							"key": "routeType",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ADL 4",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bca89418-4bb8-4fdf-b945-473758ac7cd6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var arrDeptArray = jsonData.data.entry.arrivalsAndDepartures;",
							"",
							"console.log(\"****************\");",
							"",
							"if (arrDeptArray.length > 0) {",
							"//iterate through this and check all",
							"for (let i = 0; i < arrDeptArray.length; i++) {",
							"    pm.test(\"Trip \" +i+ \" Arrival Data is realtime OR trip is canceled\", ()=> {",
							"        if (arrDeptArray[i].predicted==true) {",
							"            pm.expect(arrDeptArray[i].status).not.equal('CANCELED');",
							"        }",
							"        if (arrDeptArray[i].predicted==false) {",
							"            pm.expect(arrDeptArray[i].status).equal('CANCELED');",
							"        }",
							"    });",
							"    pm.test(\"Trip \" +i+ \" stop\", function () {",
							"        pm.expect(arrDeptArray[i].stopId).to.be.oneOf([\"LI_56\"]);",
							"        });",
							"        ",
							"    pm.test(\"Trip \" +i+ \" routeId\", function () {",
							"        pm.expect(arrDeptArray[i].routeId).to.be.oneOf([\"LI_4\", \"LI_10\"]);",
							"        }); ",
							"        ",
							"    pm.test(\"Trip \" +i+ \" headsign\", function () {",
							"        pm.expect(arrDeptArray[i].tripHeadsign).to.be.oneOf([\"Huntington\", \"Grand Central\",\"Penn Station\",\"Ronkonkoma\"]);",
							"        });",
							"    ",
							"    pm.test(\"Trip \" +i+ \" routeLongName\", function () {",
							"        pm.expect(arrDeptArray[i].routeLongName).to.be.oneOf([\"Ronkonkoma Branch\", \"Port Jefferson Branch\"]);",
							"    });",
							"}",
							"",
							"var tripNum;",
							"var today = new Date();",
							"var realtimeTrips=0;",
							"var canceledTrips=0;",
							"console.log(today);",
							"console.log(\"Stop: \"+arrDeptArray[0].stopId);",
							"",
							"for (let i = 0; i < arrDeptArray.length; i++) {   ",
							"   var arrivalTime;",
							"   var utcSeconds;",
							"   var tripDate = new Date(0); ",
							"   var tripTime;",
							"   var tripId = arrDeptArray[i].tripId;",
							"   var route = arrDeptArray[i].routeShortName;",
							"   var status = arrDeptArray[i].status;",
							"   ",
							"   if(arrDeptArray[i].predicted == true) {",
							"        realtimeTrips = realtimeTrips+1;",
							"    }",
							"    if(arrDeptArray[i].status==='CANCELED'){",
							"        canceledTrips = canceledTrips+1;",
							"    }",
							"",
							" //test if the trip is using realtime data (predicted == true)",
							"    if (arrDeptArray[i].predicted == true){",
							"        if (arrDeptArray[i].predictedArrivalTime > 0) {",
							"            arrivalTime = ",
							"                arrDeptArray[i].predictedArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"",
							"            console.log(\"Trip \"+i+\" predictedArrival: \"+tripTime+\" trip: \" +route+\":\"+tripId+\" headsign: \"+arrDeptArray[i].tripHeadsign);",
							"            }",
							"        else {",
							"            if (arrDeptArray[i].scheduledArrivalTime > 0) {",
							"            arrivalTime = arrDeptArray[i].scheduledArrivalTime;",
							"            //convert the time to something readable",
							"            utcSeconds = arrivalTime.toString().substring(0, 10);",
							"            tripDate.setUTCSeconds(utcSeconds);",
							"            tripTime = tripDate.toString().substring(16, 24);",
							"            console.log(\"PREDICTED TRUE BUT NO PREDICTED ARRIVAL TIME!\");",
							"            console.log(\"Trip \"+i+\" scheduledArrival: \"+tripTime+\" trip: \"+route+\":\"+tripId);",
							"        }}",
							"    }",
							"    else {",
							"        //console.log(\"No realtime. Trip \" +i+ \" is status: \" + status + \" trip: \"+route+\":\"+tripId);",
							"    }",
							"}}",
							"else {",
							"    console.log(\"No Arrivals/Departures returned :(\");",
							"}",
							"console.log(\"Total trips: \" +arrDeptArray.length+ \", Realtime: \" +realtimeTrips+ \", Canceled: \" +canceledTrips);",
							"",
							"pm.test(\"Most trips are realtime\", function() {",
							"    pm.expect(realtimeTrips).to.be.greaterThan(arrDeptArray.length/2);",
							"});",
							"",
							"console.log(\"**************** end\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "a3974752-cbd4-44f3-8c07-4071f6db7efe",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/transit-services/v2/arrivals-and-departures-for-location.json?key=OBA&lat=40.738213&lon=-73.526694&latSpan=0.08&lonSpan=0.08",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"transit-services",
						"v2",
						"arrivals-and-departures-for-location.json"
					],
					"query": [
						{
							"key": "key",
							"value": "OBA"
						},
						{
							"key": "lat",
							"value": "40.738213"
						},
						{
							"key": "lon",
							"value": "-73.526694"
						},
						{
							"key": "latSpan",
							"value": "0.08"
						},
						{
							"key": "lonSpan",
							"value": "0.08"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ADL alerts",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bca89418-4bb8-4fdf-b945-473758ac7cd6",
						"exec": [
							"var jsonData = pm.response.json();",
							"var alertArray = jsonData.entity;",
							"",
							"console.log(\"****************\");",
							"",
							"if (alertArray.length > 0) {",
							"//iterate through this and check all",
							"    for (let i = 0; i < alertArray.length; i++) {",
							"",
							"        pm.test(\"alert \" +i+ \" \", function () {",
							"            //pm.expect(alertArray[i].id).to.be.oneOf([\"LI_56\"]);",
							"            pm.expect(alertArray[i].id).to.include(\"lmm\");",
							"            });",
							"    }",
							"}",
							"else {",
							"    console.log(\"No alerts returned :(\");",
							"}",
							"//console.log(\"Total trips: \" +arrDeptArray.length+ \", Realtime: \" +realtimeTrips+ \", Canceled: \" +canceledTrips);",
							"",
							"",
							"console.log(\"**************** end\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "105201ec-df23-4f78-b761-4bb90ed1aae1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hub-mta-{{env}}.camsys-apps.com/realtime/v2/gtfsrt/ALL/alerts?type=json&key=oba",
					"protocol": "https",
					"host": [
						"hub-mta-{{env}}",
						"camsys-apps",
						"com"
					],
					"path": [
						"realtime",
						"v2",
						"gtfsrt",
						"ALL",
						"alerts"
					],
					"query": [
						{
							"key": "type",
							"value": "json"
						},
						{
							"key": "key",
							"value": "oba"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "44fd38f0-6737-4003-8295-ec5adbefbcb7",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f1a43505-bc86-491c-a7fa-3543cdc7670a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "env",
			"value": "prod",
			"type": "string"
		}
	]
}